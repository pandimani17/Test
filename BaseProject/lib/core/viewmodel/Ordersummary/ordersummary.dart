import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:newproject/core/data/api_model/dishesreponsemodel/dishesresponsemodel.dart';
import 'package:stacked/stacked.dart';

class ordersummaryviewmodel extends BaseViewModel {
  FlutterSecureStorage pref = FlutterSecureStorage();
  Autogenerated tablemenulist = Autogenerated();
  List<CategoryDishes> newcategoryDishes = List<CategoryDishes>();
  double previousamount = 0.0;

  double totalamount = 0.0;

  initorders() async {
    if (await pref.read(key: 'tablemenulist') != null) {
      Map json = jsonDecode(await pref.read(key: 'tablemenulist'));
      tablemenulist = Autogenerated.fromJson(json);
      print(tablemenulist.toString());
      for (int i = 0; i < tablemenulist.tableMenuList.length; i++) {
        for (int j = 0;
            j < tablemenulist.tableMenuList[i].categoryDishes.length;
            j++) {
          if (tablemenulist.tableMenuList[i].categoryDishes[j].quantity !=
              null) {
            if (tablemenulist.tableMenuList[i].categoryDishes[j].quantity > 0) {
              newcategoryDishes
                  .add(tablemenulist.tableMenuList[i].categoryDishes[j]);
            }
          }
        }
      }
      notifyListeners();
      Totalamount();
    }
  }

  Totalamount() {
    for (int i = 0; i < newcategoryDishes.length; i++) {
      if (i == 0) {
        if (newcategoryDishes[i].quantity > 0) {
          totalamount =
              newcategoryDishes[i].dishPrice * newcategoryDishes[i].quantity;
          previousamount = totalamount;
        } else {
          totalamount = newcategoryDishes[i].dishPrice;
          previousamount = newcategoryDishes[i].dishPrice;
        }
      } else {
        if (newcategoryDishes[i].quantity > 0) {
          totalamount = previousamount +
              newcategoryDishes[i].dishPrice * newcategoryDishes[i].quantity;
          previousamount = totalamount;
        } else {
          totalamount = previousamount + newcategoryDishes[i].dishPrice;
          previousamount = newcategoryDishes[i].dishPrice;
        }
      }
    }
    notifyListeners();
  }

  PlaceOrder(BuildContext context) async {
    for (int i = 0; i < tablemenulist.tableMenuList.length; i++) {
      for (int j = 0;
          j < tablemenulist.tableMenuList[i].categoryDishes.length;
          j++) {
        for (int k = 0; k < newcategoryDishes.length; k++) {
          if (tablemenulist.tableMenuList[i].categoryDishes[j].dishId ==
              newcategoryDishes[k].dishId) {
            tablemenulist.tableMenuList[i].categoryDishes.removeWhere(
                (CategoryDishes) =>
                    CategoryDishes.dishId == newcategoryDishes[k].dishId);
          }
        }
      }
    }
    String dishes = jsonEncode(tablemenulist);
    await pref.write(key: 'tablemenulist', value: dishes);
    notifyListeners();
    Navigator.of(context).pop();
  }

  // chathistory.removeWhere(
  //         (ChatHistoryResponse) => ChatHistoryResponse.id == idd);
}
