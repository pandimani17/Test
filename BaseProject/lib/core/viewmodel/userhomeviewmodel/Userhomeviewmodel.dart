import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:newproject/app/locator.dart';
import 'package:newproject/core/data/api/apicall/dishesapicall.dart';
import 'package:newproject/core/data/api/models/api_response.dart';
import 'package:newproject/core/data/api_model/dishesreponsemodel/dishesresponsemodel.dart';
import 'package:newproject/ui/views/Ordersummary/ordersummary.dart';
import 'package:stacked/stacked.dart';

class userhomeviewmodel extends BaseViewModel {
  Autogenerated tablemenulist = Autogenerated();
  FlutterSecureStorage pref = FlutterSecureStorage();
  List<CategoryDishes> newcategoryDishes;
  TabController tabcontroller;

  Apicall() async {
    ApiResponse response = await locator<dishesapicall>().getdishes();
    if (response != null) {
      tablemenulist = Autogenerated.fromJson(response.jsonArray[0]);
      print(tablemenulist.toString());
      notifyListeners();
    }
  }

  Notify() {
    notifyListeners();
  }

  controller(TabController tab) {
    tab.addListener(() {
      notifyListeners();
    });
  }

  additem(int index1, int index2) async {
    int i = 0;
    if (tablemenulist.tableMenuList[index1].categoryDishes[index2].quantity ==
        null) {
      i = 1;
    } else {
      i = tablemenulist.tableMenuList[index1].categoryDishes[index2].quantity +
          1;
    }
    tablemenulist.tableMenuList[index1].categoryDishes[index2].quantity = i;
    String dishes = jsonEncode(tablemenulist);
    await pref.write(key: 'tablemenulist', value: dishes);
    notifyListeners();
  }

  deleteitem(int indexx, int index) async {
    int i = 0;
    if (tablemenulist.tableMenuList[indexx].categoryDishes[index].quantity ==
        null) {
      i = 0;
    } else if (tablemenulist
            .tableMenuList[indexx].categoryDishes[index].quantity >
        0) {
      i = tablemenulist.tableMenuList[indexx].categoryDishes[index].quantity -
          1;
    }
    tablemenulist.tableMenuList[indexx].categoryDishes[index].quantity = i;
    String dishes = jsonEncode(tablemenulist);
    await pref.write(key: 'tablemenulist', value: dishes);
    notifyListeners();
  }

  navigatetoordersummary(BuildContext context) {
    Navigator.push(
            context, MaterialPageRoute(builder: (context) => ordersummary()))
        .then((value) => Updatedata());
  }

  Updatedata() async {
    if (await pref.read(key: 'tablemenulist') != null) {
      Map json = jsonDecode(await pref.read(key: 'tablemenulist'));
      tablemenulist = Autogenerated.fromJson(json);
      notifyListeners();
    }
  }
}
